package currexx.calculations

import org.scalatest.matchers.must.Matchers
import org.scalatest.wordspec.AnyWordSpec

class VolatilitySpec extends AnyWordSpec with Matchers {

  "A Volatility" should {

    "calculate average true range for the specified period" in {
      val closes = values.map(_._4.toDouble)
      val highs  = values.map(_._2.toDouble)
      val lows   = values.map(_._3.toDouble)

      val result = Volatility.averageTrueRange(closes, highs, lows, 14)

      result.take(5) mustBe List(0.010395764231029447, 0.01073928455649325, 0.01027461413776196, 0.01032496907143596, 0.0106038128461618)
    }
  }

  // AUDUSD - 06/12/2022 - OHLC
  val values = List(
    ("0.67042", "0.67443", "0.66850", "0.66982"),
    ("0.67740", "0.68508", "0.66830", "0.66975"),
    ("0.68113", "0.68362", "0.67400", "0.67914"),
    ("0.67878", "0.68450", "0.67780", "0.68112"),
    ("0.66832", "0.68010", "0.66670", "0.67876"),
    ("0.66492", "0.67489", "0.66370", "0.66879"),
    ("0.67178", "0.67278", "0.66380", "0.66493"),
    ("0.67643", "0.67807", "0.67170", "0.67450"),
    ("0.67328", "0.67783", "0.67221", "0.67643"),
    ("0.66478", "0.67388", "0.66300", "0.67324"),
    ("0.66049", "0.66515", "0.65940", "0.66479"),
    ("0.66611", "0.66835", "0.65810", "0.66045"),
    ("0.66808", "0.67305", "0.66570", "0.66684"),
    ("0.67400", "0.67511", "0.66310", "0.66809"),
    ("0.67541", "0.67930", "0.67160", "0.67399"),
    ("0.66986", "0.67977", "0.66820", "0.67559"),
    ("0.66990", "0.67239", "0.66600", "0.67003"),
    ("0.66185", "0.67168", "0.65750", "0.67052"),
    ("0.64294", "0.66317", "0.63830", "0.66177"),
    ("0.65044", "0.65221", "0.64110", "0.64304"),
    ("0.64768", "0.65513", "0.64400", "0.65044"),
    ("0.64159", "0.64907", "0.64030", "0.64777"),
    ("0.62889", "0.64830", "0.62810", "0.64681"),
    ("0.63495", "0.63721", "0.62680", "0.62878"),
    ("0.63947", "0.64924", "0.63440", "0.63520"),
    ("0.63951", "0.64638", "0.63730", "0.63910"),
    ("0.63976", "0.64280", "0.63640", "0.63951"),
    ("0.64520", "0.64798", "0.63850", "0.64090"),
    ("0.64905", "0.65221", "0.64220", "0.64517"),
    ("0.63888", "0.65111", "0.63690", "0.64901"),
    ("0.63042", "0.64122", "0.63000", "0.63892"),
    ("0.63976", "0.64113", "0.62690", "0.63055"),
    ("0.62814", "0.63929", "0.62070", "0.63805"),
    ("0.62718", "0.63561", "0.62250", "0.62804"),
    ("0.63104", "0.63252", "0.62470", "0.62697"),
    ("0.62867", "0.63398", "0.62630", "0.63103"),
    ("0.62067", "0.63120", "0.62027", "0.62863"),
    ("0.62961", "0.63470", "0.61900", "0.61940"),
    ("0.62759", "0.63165", "0.61670", "0.62957"),
    ("0.62715", "0.62987", "0.62330", "0.62751"),
    ("0.62957", "0.63460", "0.62440", "0.62715"),
    ("0.63657", "0.63802", "0.62710", "0.62947"),
    ("0.64125", "0.64325", "0.63500", "0.63680"),
    ("0.64893", "0.65409", "0.63850", "0.64105"),
    ("0.65005", "0.65262", "0.64130", "0.64890"),
    ("0.65131", "0.65474", "0.64470", "0.65009"),
    ("0.64020", "0.65221", "0.63987", "0.65118"),
    ("0.64988", "0.65239", "0.63880", "0.64020"),
    ("0.65195", "0.65215", "0.64320", "0.64973"),
    ("0.64330", "0.65309", "0.63590", "0.65200"),
    ("0.64546", "0.65128", "0.64110", "0.64316"),
    ("0.65180", "0.65380", "0.64340", "0.64535"),
    ("0.66422", "0.66558", "0.65080", "0.65283"),
    ("0.66314", "0.66710", "0.65710", "0.66420"),
    ("0.66867", "0.67052", "0.66190", "0.66314"),
    ("0.67267", "0.67474", "0.66730", "0.66869"),
    ("0.67126", "0.67340", "0.66690", "0.67260"),
    ("0.66981", "0.67242", "0.66660", "0.67180"),
    ("0.67485", "0.67700", "0.66920", "0.66980"),
    ("0.67342", "0.67603", "0.67010", "0.67469"),
    ("0.68855", "0.69161", "0.67230", "0.67331"),
    ("0.68375", "0.68996", "0.68200", "0.68857"),
    ("0.67476", "0.68774", "0.67460", "0.68400"),
    ("0.67695", "0.67740", "0.67090", "0.67462"),
    ("0.67357", "0.67697", "0.66960", "0.67682"),
    ("0.67942", "0.68325", "0.67250", "0.67352"),
    ("0.67815", "0.68040", "0.67690", "0.67946"),
    ("0.67844", "0.68550", "0.67760", "0.68080"),
    ("0.68423", "0.68458", "0.67670", "0.67826"),
    ("0.68521", "0.69040", "0.68310", "0.68420"),
    ("0.69003", "0.69560", "0.68420", "0.68530"),
    ("0.68839", "0.69260", "0.68370", "0.69004"),
    ("0.69800", "0.70090", "0.68850", "0.68900"),
    ("0.69064", "0.69912", "0.68990", "0.69801"),
    ("0.69263", "0.69310", "0.68750", "0.69061"),
    ("0.68749", "0.69635", "0.68520", "0.69263"),
    ("0.68736", "0.69291", "0.68590", "0.68735"),
    ("0.69137", "0.69195", "0.68550", "0.68720"),
    ("0.69323", "0.69699", "0.68950", "0.69140"),
    ("0.70221", "0.70263", "0.69070", "0.69315"),
    ("0.70213", "0.70401", "0.69870", "0.70228"),
    ("0.71140", "0.71251", "0.70070", "0.70211"),
    ("0.71022", "0.71282", "0.70810", "0.71210"),
    ("0.70762", "0.71368", "0.70590", "0.71030"),
    ("0.69632", "0.71091", "0.69430", "0.70770"),
    ("0.69819", "0.69945", "0.69490", "0.69631"),
    ("0.69066", "0.70098", "0.68940", "0.69816"),
    ("0.69652", "0.69750", "0.68660", "0.69080"),
    ("0.69481", "0.69898", "0.69310", "0.69651"),
    ("0.69176", "0.69558", "0.68820", "0.69488"),
    ("0.70264", "0.70321", "0.69090", "0.69175"),
    ("0.69839", "0.70470", "0.69640", "0.70244"),
    ("0.69885", "0.70316", "0.69070", "0.69840"),
    ("0.69900", "0.70138", "0.69510", "0.69884"),
    ("0.69362", "0.70124", "0.69090", "0.69920"),
    ("0.69559", "0.69832", "0.69180", "0.69363"),
    ("0.69236", "0.69654", "0.68760", "0.69560"),
    ("0.69329", "0.69774", "0.68900", "0.69240"),
    ("0.68877", "0.69390", "0.68550", "0.69330"),
    ("0.68976", "0.69304", "0.68690", "0.68870")
  ).map((o, h, l, c) => (BigDecimal(o), BigDecimal(h), BigDecimal(l), BigDecimal(c)))
}
